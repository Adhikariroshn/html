<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kitchen Dashboard - Restaurant Order Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --success: #27ae60;
            --warning: #f39c12;
            --danger: #e74c3c;
            --light: #ecf0f1;
            --dark: #34495e;
            --text: #2c3e50;
            --background: #f8f9fa;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--background);
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: var(--primary);
            color: white;
            padding: 15px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .logo i {
            font-size: 1.8rem;
            color: var(--warning);
        }

        .logo h1 {
            font-size: 1.5rem;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin: 20px 0;
        }

        .stat-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            flex: 1;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .stat-card i {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .stat-card.orders i { color: var(--secondary); }
        .stat-card.preparing i { color: var(--warning); }
        .stat-card.ready i { color: var(--success); }
        .stat-card.paid i { color: var(--success); }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 5px 0;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .dashboard-content {
            display: grid;
            grid-template-columns: 3fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .orders-section, .payments-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .section-title {
            font-size: 1.3rem;
            font-weight: 600;
        }

        .order-filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .filter-btn {
            padding: 8px 15px;
            border-radius: 20px;
            background: var(--light);
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .filter-btn.active {
            background: var(--secondary);
            color: white;
        }

        .order-list {
            display: grid;
            gap: 15px;
        }

        .order-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.3s ease;
            position: relative;
        }

        .order-card.pending { border-left: 4px solid var(--secondary); }
        .order-card.preparing { border-left: 4px solid var(--warning); }
        .order-card.ready { border-left: 4px solid var(--success); }

        .order-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .order-id {
            font-weight: bold;
            color: var(--dark);
        }

        .order-time {
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .order-table {
            background: var(--light);
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.9rem;
            display: inline-block;
        }

        .order-items {
            margin: 10px 0;
            padding-left: 20px;
        }

        .order-item {
            margin: 8px 0;
            display: flex;
            justify-content: space-between;
        }

        .item-quantity {
            font-weight: bold;
            margin-right: 5px;
        }

        .order-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px dashed #eee;
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-pending { background: #e1f0fa; color: var(--secondary); }
        .status-preparing { background: #fef5e6; color: var(--warning); }
        .status-ready { background: #e8f8f1; color: var(--success); }

        .status-actions {
            display: flex;
            gap: 5px;
        }

        .action-btn {
            padding: 6px 12px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-size: 0.85rem;
            transition: all 0.2s ease;
        }

        .action-btn i {
            margin-right: 5px;
        }

        .btn-prepare { background: #fef5e6; color: var(--warning); }
        .btn-ready { background: #e8f8f1; color: var(--success); }
        .btn-complete { background: var(--success); color: white; }

        .payment-list {
            display: grid;
            gap: 15px;
        }

        .payment-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }

        .payment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .payment-method {
            font-size: 0.9rem;
            padding: 3px 8px;
            border-radius: 4px;
            font-weight: 500;
        }

        .method-cash { background: #e8f8f1; color: var(--success); }
        .method-fonepay { background: #e1f0fa; color: var(--secondary); }

        .payment-details {
            margin: 10px 0;
        }

        .payment-row {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
        }

        .payment-label {
            color: #7f8c8d;
        }

        .payment-actions {
            text-align: right;
            margin-top: 10px;
        }

        .btn-confirm {
            background: var(--success);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 10px;
            z-index: 1000;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .notification i {
            font-size: 1.2rem;
        }

        @media (max-width: 900px) {
            .dashboard-content {
                grid-template-columns: 1fr;
            }
            
            .stats {
                flex-wrap: wrap;
            }
            
            .stat-card {
                min-width: calc(50% - 10px);
            }
        }

        @media (max-width: 600px) {
            .stat-card {
                min-width: 100%;
            }
            
            .header-content {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
            
            .order-filters {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <div class="logo">
                <i class="fas fa-utensils"></i>
                <h1>Kitchen Dashboard</h1>
            </div>
            <div class="header-info">
                <span id="current-time"></span>
            </div>
        </div>
    </header>
    
    <div class="container">
        <div class="stats">
            <div class="stat-card orders">
                <i class="fas fa-clipboard-list"></i>
                <div class="stat-value">14</div>
                <div class="stat-label">Total Orders</div>
            </div>
            <div class="stat-card preparing">
                <i class="fas fa-clock"></i>
                <div class="stat-value">6</div>
                <div class="stat-label">Preparing</div>
            </div>
            <div class="stat-card ready">
                <i class="fas fa-check-circle"></i>
                <div class="stat-value">4</div>
                <div class="stat-label">Ready to Serve</div>
            </div>
            <div class="stat-card paid">
                <i class="fas fa-money-bill-wave"></i>
                <div class="stat-value">8</div>
                <div class="stat-label">Payments Today</div>
            </div>
        </div>
        
        <div class="dashboard-content">
            <div class="orders-section">
                <div class="section-header">
                    <h2 class="section-title">Active Orders</h2>
                    <div class="controls">
                        <button class="filter-btn" id="play-sound">
                            <i class="fas fa-bell"></i> Enable Sound
                        </button>
                    </div>
                </div>
                
                <div class="order-filters">
                    <button class="filter-btn active">All</button>
                    <button class="filter-btn">Pending</button>
                    <button class="filter-btn">Preparing</button>
                    <button class="filter-btn">Ready</button>
                </div>
                
                <div class="order-list" id="order-list">
                    <!-- Orders will be inserted here by JavaScript -->
                </div>
            </div>
            
            <div class="payments-section">
                <div class="section-header">
                    <h2 class="section-title">Recent Payments</h2>
                </div>
                
                <div class="payment-list" id="payment-list">
                    <!-- Payments will be inserted here by JavaScript -->
                </div>
            </div>
        </div>
    </div>
    
    <div class="notification" id="notification">
        <i class="fas fa-check-circle"></i>
        <span>Order status updated successfully!</span>
    </div>
    
    <script>
        // Sample data for orders
        const orders = [
            {
                id: "#ORD-1284",
                table: "Table 5",
                time: "12:24 PM",
                items: [
                    { name: "Butter Chicken", quantity: 1, notes: "Mild spicy" },
                    { name: "Garlic Naan", quantity: 2 },
                    { name: "Mango Lassi", quantity: 1 }
                ],
                status: "pending",
                total: 32.50
            },
            {
                id: "#ORD-1283",
                table: "Table 2",
                time: "12:18 PM",
                items: [
                    { name: "Paneer Tikka", quantity: 1 },
                    { name: "Vegetable Biryani", quantity: 2, notes: "Extra raita" },
                    { name: "Masala Chai", quantity: 2 }
                ],
                status: "preparing",
                total: 41.75
            },
            {
                id: "#ORD-1282",
                table: "Table 8",
                time: "12:05 PM",
                items: [
                    { name: "Chicken Biryani", quantity: 3, notes: "1 extra spicy" },
                    { name: "Gulab Jamun", quantity: 2 }
                ],
                status: "ready",
                total: 54.25
            },
            {
                id: "#ORD-1281",
                table: "VIP Table 1",
                time: "11:58 AM",
                items: [
                    { name: "Tandoori Platter", quantity: 1 },
                    { name: "Dal Makhani", quantity: 1 },
                    { name: "Butter Naan", quantity: 4 },
                    { name: "Kulfi", quantity: 2 }
                ],
                status: "preparing",
                total: 68.40
            }
        ];
        
        // Sample data for payments
        const payments = [
            {
                id: "#PAY-0421",
                table: "Table 3",
                time: "12:30 PM",
                method: "fonepay",
                amount: 45.60,
                status: "completed"
            },
            {
                id: "#PAY-0420",
                table: "Table 7",
                time: "12:22 PM",
                method: "cash",
                amount: 32.75,
                status: "pending"
            },
            {
                id: "#PAY-0419",
                table: "Table 4",
                time: "12:15 PM",
                method: "fonepay",
                amount: 28.90,
                status: "completed"
            }
        ];
        
        // Function to render orders
        function renderOrders() {
            const orderList = document.getElementById('order-list');
            orderList.innerHTML = '';
            
            orders.forEach(order => {
                const orderElement = document.createElement('div');
                orderElement.className = `order-card ${order.status}`;
                
                let itemsHTML = '';
                order.items.forEach(item => {
                    itemsHTML += `
                        <div class="order-item">
                            <div>
                                <span class="item-quantity">${item.quantity}x</span> 
                                ${item.name}
                                ${item.notes ? `<div class="item-notes"><small>(${item.notes})</small></div>` : ''}
                            </div>
                            <div>$${(order.total / order.items.length).toFixed(2)}</div>
                        </div>
                    `;
                });
                
                let statusBtn = '';
                if (order.status === 'pending') {
                    statusBtn = '<button class="action-btn btn-prepare" onclick="updateOrderStatus(\'' + order.id + '\', \'preparing\')"><i class="fas fa-fire"></i>Start Preparing</button>';
                } else if (order.status === 'preparing') {
                    statusBtn = '<button class="action-btn btn-ready" onclick="updateOrderStatus(\'' + order.id + '\', \'ready\')"><i class="fas fa-check"></i>Mark as Ready</button>';
                } else {
                    statusBtn = '<button class="action-btn btn-complete" onclick="completeOrder(\'' + order.id + '\')"><i class="fas fa-check-circle"></i>Order Served</button>';
                }
                
                orderElement.innerHTML = `
                    <div class="order-card-header">
                        <div class="order-id">${order.id}</div>
                        <div class="order-time">${order.time}</div>
                    </div>
                    <div class="order-table">${order.table}</div>
                    <div class="order-items">${itemsHTML}</div>
                    <div class="order-status">
                        <div class="status-badge status-${order.status}">
                            ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                        </div>
                        <div class="status-actions">
                            ${statusBtn}
                        </div>
                    </div>
                `;
                
                orderList.appendChild(orderElement);
            });
        }
        
        // Function to render payments
        function renderPayments() {
            const paymentList = document.getElementById('payment-list');
            paymentList.innerHTML = '';
            
            payments.forEach(payment => {
                const paymentElement = document.createElement('div');
                paymentElement.className = 'payment-card';
                
                paymentElement.innerHTML = `
                    <div class="payment-header">
                        <div class="payment-id">${payment.id}</div>
                        <div class="payment-method method-${payment.method}">
                            ${payment.method === 'cash' ? 'Cash Payment' : 'Fonepay QR'}
                        </div>
                    </div>
                    <div class="payment-details">
                        <div class="payment-row">
                            <span class="payment-label">Table:</span>
                            <span>${payment.table}</span>
                        </div>
                        <div class="payment-row">
                            <span class="payment-label">Time:</span>
                            <span>${payment.time}</span>
                        </div>
                        <div class="payment-row">
                            <span class="payment-label">Amount:</span>
                            <span class="payment-amount">$${payment.amount.toFixed(2)}</span>
                        </div>
                        <div class="payment-row">
                            <span class="payment-label">Status:</span>
                            <span class="${payment.status === 'completed' ? 'status-completed' : 'status-pending'}">
                                ${payment.status === 'completed' ? 'Completed' : 'Pending Confirmation'}
                            </span>
                        </div>
                    </div>
                    ${payment.status === 'pending' ? `
                    <div class="payment-actions">
                        <button class="btn-confirm" onclick="confirmPayment('${payment.id}')">
                            <i class="fas fa-check"></i> Confirm Payment
                        </button>
                    </div>
                    ` : ''}
                `;
                
                paymentList.appendChild(paymentElement);
            });
        }
        
        // Function to update order status
        function updateOrderStatus(orderId, newStatus) {
            const order = orders.find(o => o.id === orderId);
            if (order) {
                order.status = newStatus;
                renderOrders();
                showNotification(`Order ${orderId} status updated to ${newStatus}`);
            }
        }
        
        // Function to complete an order
        function completeOrder(orderId) {
            const orderIndex = orders.findIndex(o => o.id === orderId);
            if (orderIndex !== -1) {
                orders.splice(orderIndex, 1);
                renderOrders();
                showNotification(`Order ${orderId} has been served`);
            }
        }
        
        // Function to confirm payment
        function confirmPayment(paymentId) {
            const payment = payments.find(p => p.id === paymentId);
            if (payment) {
                payment.status = 'completed';
                renderPayments();
                showNotification(`Payment ${paymentId} confirmed`);
            }
        }
        
        // Function to show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.querySelector('span').textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // Function to update current time
        function updateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            document.getElementById('current-time').textContent = timeString;
        }
        
        // Initialize the dashboard
        function initDashboard() {
            renderOrders();
            renderPayments();
            updateTime();
            setInterval(updateTime, 60000); // Update time every minute
            
            // Set up sound notification toggle
            document.getElementById('play-sound').addEventListener('click', function() {
                this.classList.toggle('active');
                const icon = this.querySelector('i');
                if (this.classList.contains('active')) {
                    this.innerHTML = '<i class="fas fa-bell-slash"></i> Disable Sound';
                    // In a real app, we would enable sound notifications
                } else {
                    this.innerHTML = '<i class="fas fa-bell"></i> Enable Sound';
                }
            });
        }
        
        // Initialize when page loads
        window.onload = initDashboard;
    </script>
</body>
</html>
