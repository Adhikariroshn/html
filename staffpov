<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kitchen Dashboard - Restaurant Order Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --success: #27ae60;
            --warning: #f4b857;
            --danger: #e74c3c;
            --light: #ecf0f1;
            --dark: #34495e;
            --text: #2c3e50;
            --background: #f8f9fa;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--background);
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background: var(--primary);
            color: white;
            padding: 15px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .logo i {
            font-size: 1.8rem;
            color: var(--warning);
        }

        .logo h1 {
            font-size: 1.5rem;
        }

        .stats {
            display: flex;
            gap: 20px;
            margin: 20px 0;
        }

        .stat-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            flex: 1;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .stat-card i {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .stat-card.orders i { color: var(--secondary); }
        .stat-card.preparing i { color: var(--warning); }
        .stat-card.ready i { color: var(--success); }
        .stat-card.paid i { color: var(--success); }

        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 5px 0;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .dashboard-content {
            display: grid;
            grid-template-columns: 3fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }

        .orders-section, .payments-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .section-title {
            font-size: 1.3rem;
            font-weight: 600;
        }

        .order-filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .filter-btn {
            padding: 8px 15px;
            border-radius: 20px;
            background: var(--light);
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .filter-btn.active {
            background: var(--secondary);
            color: white;
        }

        .order-list {
            display: grid;
            gap: 15px;
        }

        .order-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.3s ease;
            position: relative;
        }

        .order-card.pending { border-left: 4px solid var(--secondary); }
        .order-card.preparing { border-left: 4px solid var(--warning); }
        .order-card.ready { border-left: 4px solid var(--success); }

        .order-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .order-id {
            font-weight: bold;
            color: var(--dark);
        }

        .order-time {
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .order-table {
            background: var(--light);
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.9rem;
            display: inline-block;
        }

        .order-items {
            margin: 10px 0;
            padding-left: 20px;
        }

        .order-item {
            margin: 8px 0;
            display: flex;
            justify-content: space-between;
        }

        .item-quantity {
            font-weight: bold;
            margin-right: 5px;
        }

        .order-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px dashed #eee;
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-pending { background: #e1f0fa; color: var(--secondary); }
        .status-preparing { background: #fef5e6; color: var(--warning); }
        .status-ready { background: #e8f8f1; color: var(--success); }

        .status-actions {
            display: flex;
            gap: 5px;
        }

        .action-btn {
            padding: 6px 12px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            font-size: 0.85rem;
            transition: all 0.2s ease;
        }

        .action-btn i {
            margin-right: 5px;
        }

        .btn-prepare { background: #fef5e6; color: var(--warning); }
        .btn-ready { background: #e8f8f1; color: var(--success); }
        .btn-complete { background: var(--success); color: white; }

        .payment-list {
            display: grid;
            gap: 15px;
        }

        .payment-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }

        .payment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .payment-method {
            font-size: 0.9rem;
            padding: 3px 8px;
            border-radius: 4px;
            font-weight: 500;
        }

        .method-cash { background: #e8f8f1; color: var(--success); }
        .method-fonepay { background: #e1f0fa; color: var(--secondary); }

        .payment-details {
            margin: 10px 0;
        }

        .payment-row {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
        }

        .payment-label {
            color: #7f8c8d;
        }

        .payment-actions {
            text-align: right;
            margin-top: 10px;
        }

        .btn-confirm {
            background: var(--success);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 10px;
            z-index: 1000;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .notification i {
            font-size: 1.2rem;
        }

        .admin-controls {
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .admin-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }

        .btn-add-order { background: var(--secondary); color: white; }
        .btn-add-payment { background: var(--success); color: white; }
        .btn-clear-data { background: var(--danger); color: white; }

        @media (max-width: 900px) {
            .dashboard-content {
                grid-template-columns: 1fr;
            }
            
            .stats {
                flex-wrap: wrap;
            }
            
            .stat-card {
                min-width: calc(50% - 10px);
            }
        }

        @media (max-width: 600px) {
            .stat-card {
                min-width: 100%;
            }
            
            .header-content {
                flex-direction: column;
                gap: 10px;
                text-align: center;
            }
            
            .order-filters {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <div class="logo">
                <i class="fas fa-utensils"></i>
                <h1>Kitchen Dashboard</h1>
            </div>
            <div class="header-info">
                <span id="current-time"></span>
            </div>
        </div>
    </header>
    
    <div class="container">
        <div class="admin-controls">
            <button class="admin-btn btn-add-order" onclick="addSampleOrder()">
                <i class="fas fa-plus"></i> Add Sample Order
            </button>
            <button class="admin-btn btn-add-payment" onclick="addSamplePayment()">
                <i class="fas fa-dollar-sign"></i> Add Sample Payment
            </button>
            <button class="admin-btn btn-clear-data" onclick="clearAllData()">
                <i class="fas fa-trash"></i> Clear All Data
            </button>
        </div>

        <div class="stats">
            <div class="stat-card orders">
                <i class="fas fa-clipboard-list"></i>
                <div class="stat-value" id="total-orders">0</div>
                <div class="stat-label">Total Orders</div>
            </div>
            <div class="stat-card preparing">
                <i class="fas fa-clock"></i>
                <div class="stat-value" id="preparing-orders">0</div>
                <div class="stat-label">Preparing</div>
            </div>
            <div class="stat-card ready">
                <i class="fas fa-check-circle"></i>
                <div class="stat-value" id="ready-orders">0</div>
                <div class="stat-label">Ready to Serve</div>
            </div>
            <div class="stat-card paid">
                <i class="fas fa-money-bill-wave"></i>
                <div class="stat-value" id="completed-payments">0</div>
                <div class="stat-label">Payments Today</div>
            </div>
        </div>
        
        <div class="dashboard-content">
            <div class="orders-section">
                <div class="section-header">
                    <h2 class="section-title">Active Orders</h2>
                    <div class="controls">
                        <button class="filter-btn" id="play-sound">
                            <i class="fas fa-bell"></i> Enable Sound
                        </button>
                    </div>
                </div>
                
                <div class="order-filters">
                    <button class="filter-btn active" data-filter="all">All</button>
                    <button class="filter-btn" data-filter="pending">Pending</button>
                    <button class="filter-btn" data-filter="preparing">Preparing</button>
                    <button class="filter-btn" data-filter="ready">Ready</button>
                </div>
                
                <div class="order-list" id="order-list">
                    <!-- Orders will be inserted here by JavaScript -->
                </div>
            </div>
            
            <div class="payments-section">
                <div class="section-header">
                    <h2 class="section-title">Recent Payments</h2>
                </div>
                
                <div class="payment-list" id="payment-list">
                    <!-- Payments will be inserted here by JavaScript -->
                </div>
            </div>
        </div>
    </div>
    
    <div class="notification" id="notification">
        <i class="fas fa-check-circle"></i>
        <span>Order status updated successfully!</span>
    </div>
    
    <script>
       // Database management class
class RestaurantDB {
    constructor() {
        this.dbName = 'restaurantDB';
        this.version = 1;
        this.db = null;
    }

    async init() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, this.version);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                this.db = request.result;
                resolve(this.db);
            };
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                
                // Create orders store
                if (!db.objectStoreNames.contains('orders')) {
                    const ordersStore = db.createObjectStore('orders', { keyPath: 'id' });
                    ordersStore.createIndex('status', 'status', { unique: false });
                    ordersStore.createIndex('table', 'table', { unique: false });
                    ordersStore.createIndex('timestamp', 'timestamp', { unique: false });
                }
                
                // Create payments store
                if (!db.objectStoreNames.contains('payments')) {
                    const paymentsStore = db.createObjectStore('payments', { keyPath: 'id' });
                    paymentsStore.createIndex('status', 'status', { unique: false });
                    paymentsStore.createIndex('method', 'method', { unique: false });
                    paymentsStore.createIndex('timestamp', 'timestamp', { unique: false });
                }
            };
        });
    }

    async addOrder(order) {
        const transaction = this.db.transaction(['orders'], 'readwrite');
        const store = transaction.objectStore('orders');
        return store.add({
            ...order,
            timestamp: Date.now(),
            createdAt: new Date().toISOString()
        });
    }

    async getAllOrders() {
        const transaction = this.db.transaction(['orders'], 'readonly');
        const store = transaction.objectStore('orders');
        return new Promise((resolve, reject) => {
            const request = store.getAll();
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async updateOrder(id, updates) {
        const transaction = this.db.transaction(['orders'], 'readwrite');
        const store = transaction.objectStore('orders');
        
        return new Promise((resolve, reject) => {
            const getRequest = store.get(id);
            getRequest.onsuccess = () => {
                const order = getRequest.result;
                if (order) {
                    Object.assign(order, updates);
                    const putRequest = store.put(order);
                    putRequest.onsuccess = () => resolve(order);
                    putRequest.onerror = () => reject(putRequest.error);
                } else {
                    reject(new Error('Order not found'));
                }
            };
            getRequest.onerror = () => reject(getRequest.error);
        });
    }

    async deleteOrder(id) {
        const transaction = this.db.transaction(['orders'], 'readwrite');
        const store = transaction.objectStore('orders');
        return store.delete(id);
    }

    async addPayment(payment) {
        const transaction = this.db.transaction(['payments'], 'readwrite');
        const store = transaction.objectStore('payments');
        return store.add({
            ...payment,
            timestamp: Date.now(),
            createdAt: new Date().toISOString()
        });
    }

    async getAllPayments() {
        const transaction = this.db.transaction(['payments'], 'readonly');
        const store = transaction.objectStore('payments');
        return new Promise((resolve, reject) => {
            const request = store.getAll();
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }

    async updatePayment(id, updates) {
        const transaction = this.db.transaction(['payments'], 'readwrite');
        const store = transaction.objectStore('payments');
        
        return new Promise((resolve, reject) => {
            const getRequest = store.get(id);
            getRequest.onsuccess = () => {
                const payment = getRequest.result;
                if (payment) {
                    Object.assign(payment, updates);
                    const putRequest = store.put(payment);
                    putRequest.onsuccess = () => resolve(payment);
                    putRequest.onerror = () => reject(putRequest.error);
                } else {
                    reject(new Error('Payment not found'));
                }
            };
            getRequest.onerror = () => reject(getRequest.error);
        });
    }

    async clearAllData() {
        const transaction = this.db.transaction(['orders', 'payments'], 'readwrite');
        const ordersStore = transaction.objectStore('orders');
        const paymentsStore = transaction.objectStore('payments');
        
        await Promise.all([
            ordersStore.clear(),
            paymentsStore.clear()
        ]);
    }
}

// Initialize database
const db = new RestaurantDB();
let orders = [];
let payments = [];
let currentFilter = 'all';

// Initialize the application
async function initApp() {
    try {
        await db.init();
        console.log('Database initialized successfully');
        
        // Load existing data
        await loadData();
        
        // Set up initial sample data if empty
        if (orders.length === 0) {
            await addInitialSampleData();
        }
        
        setupEventListeners();
        updateDashboard();
        updateTime();
        setInterval(updateTime, 60000);
        
    } catch (error) {
        console.error('Failed to initialize app:', error);
        showNotification('Failed to initialize database', 'error');
    }
}

async function loadData() {
    try {
        orders = await db.getAllOrders();
        payments = await db.getAllPayments();
    } catch (error) {
        console.error('Failed to load data:', error);
    }
}

async function addInitialSampleData() {
    const sampleOrders = [
        {
            id: "#ORD-1284",
            table: "Table 5",
            time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
            items: [
                { name: "Butter Chicken", quantity: 1, notes: "Mild spicy" },
                { name: "Garlic Naan", quantity: 2 },
                { name: "Mango Lassi", quantity: 1 }
            ],
            status: "pending",
            total: 32.50
        },
        {
            id: "#ORD-1283",
            table: "Table 2",
            time: new Date(Date.now() - 360000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
            items: [
                { name: "Paneer Tikka", quantity: 1 },
                { name: "Vegetable Biryani", quantity: 2, notes: "Extra raita" },
                { name: "Masala Chai", quantity: 2 }
            ],
            status: "preparing",
            total: 41.75
        }
    ];

    const samplePayments = [
        {
            id: "#PAY-0421",
            table: "Table 3",
            time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
            method: "fonepay",
            amount: 45.60,
            status: "completed"
        },
        {
            id: "#PAY-0420",
            table: "Table 7",
            time: new Date(Date.now() - 480000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
            method: "cash",
            amount: 32.75,
            status: "pending"
        }
    ];

    for (const order of sampleOrders) {
        await db.addOrder(order);
    }

    for (const payment of samplePayments) {
        await db.addPayment(payment);
    }

    await loadData();
}

function setupEventListeners() {
    // Filter buttons
    document.querySelectorAll('.filter-btn[data-filter]').forEach(btn => {
        btn.addEventListener('click', (e) => {
            document.querySelectorAll('.filter-btn[data-filter]').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            currentFilter = e.target.dataset.filter;
            renderOrders();
        });
    });

    // Sound toggle
    document.getElementById('play-sound').addEventListener('click', function() {
        this.classList.toggle('active');
        const icon = this.querySelector('i');
        if (this.classList.contains('active')) {
            this.innerHTML = '<i class="fas fa-bell-slash"></i> Disable Sound';
        } else {
            this.innerHTML = '<i class="fas fa-bell"></i> Enable Sound';
        }
    });
}

function updateDashboard() {
    updateStats();
    renderOrders();
    renderPayments();
}

function updateStats() {
    const totalOrders = orders.length;
    const preparingOrders = orders.filter(o => o.status === 'preparing').length;
    const readyOrders = orders.filter(o => o.status === 'ready').length;
    const completedPayments = payments.filter(p => p.status === 'completed').length;

    document.getElementById('total-orders').textContent = totalOrders;
    document.getElementById('preparing-orders').textContent = preparingOrders;
    document.getElementById('ready-orders').textContent = readyOrders;
    document.getElementById('completed-payments').textContent = completedPayments;
}

function renderOrders() {
    const orderList = document.getElementById('order-list');
    orderList.innerHTML = '';
    
    let filteredOrders = orders;
    if (currentFilter !== 'all') {
        filteredOrders = orders.filter(order => order.status === currentFilter);
    }
    
    filteredOrders.forEach(order => {
        const orderElement = document.createElement('div');
        orderElement.className = `order-card ${order.status}`;
        
        let itemsHTML = '';
        order.items.forEach(item => {
            itemsHTML += `
                <div class="order-item">
                    <div>
                        <span class="item-quantity">${item.quantity}x</span> 
                        ${item.name}
                        ${item.notes ? `<div class="item-notes"><small>(${item.notes})</small></div>` : ''}
                    </div>
                    <div>$${(order.total / order.items.length).toFixed(2)}</div>
                </div>
            `;
        });
        
        let statusBtn = '';
        if (order.status === 'pending') {
            statusBtn = `<button class="action-btn btn-prepare" onclick="updateOrderStatus('${order.id}', 'preparing')"><i class="fas fa-fire"></i>Start Preparing</button>`;
        } else if (order.status === 'preparing') {
            statusBtn = `<button class="action-btn btn-ready" onclick="updateOrderStatus('${order.id}', 'ready')"><i class="fas fa-check"></i>Mark as Ready</button>`;
        } else {
            statusBtn = `<button class="action-btn btn-complete" onclick="completeOrder('${order.id}')"><i class="fas fa-check-circle"></i>Order Served</button>`;
        }
        
        orderElement.innerHTML = `
            <div class="order-card-header">
                <div class="order-id">${order.id}</div>
                <div class="order-time">${order.time}</div>
            </div>
            <div class="order-table">${order.table}</div>
            <div class="order-items">${itemsHTML}</div>
            <div class="order-status">
                <div class="status-badge status-${order.status}">
                    ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                </div>
                <div class="status-actions">
                    ${statusBtn}
                </div>
            </div>
        `;
        
        orderList.appendChild(orderElement);
    });
}

function renderPayments() {
    const paymentList = document.getElementById('payment-list');
    paymentList.innerHTML = '';
    
    payments.slice(0, 10).forEach(payment => {
        const paymentElement = document.createElement('div');
        paymentElement.className = 'payment-card';
        
        paymentElement.innerHTML = `
            <div class="payment-header">
                <div class="payment-id">${payment.id}</div>
                <div class="payment-method method-${payment.method}">
                    ${payment.method === 'cash' ? 'Cash Payment' : 'Fonepay QR'}
                </div>
            </div>
            <div class="payment-details">
                <div class="payment-row">
                    <span class="payment-label">Table:</span>
                    <span>${payment.table}</span>
                </div>
                <div class="payment-row">
                    <span class="payment-label">Time:</span>
                    <span>${payment.time}</span>
                </div>
                <div class="payment-row">
                    <span class="payment-label">Amount:</span>
                    <span class="payment-amount">$${payment.amount.toFixed(2)}</span>
                </div>
                <div class="payment-row">
                    <span class="payment-label">Status:</span>
                    <span class="${payment.status === 'completed' ? 'status-completed' : 'status-pending'}">
                        ${payment.status === 'completed' ? 'Completed' : 'Pending Confirmation'}
                    </span>
                </div>
            </div>
            ${payment.status === 'pending' ? `
            <div class="payment-actions">
                <button class="btn-confirm" onclick="confirmPayment('${payment.id}')">
                    <i class="fas fa-check"></i> Confirm Payment
                </button>
            </div>
            ` : ''}
        `;
        
        paymentList.appendChild(paymentElement);
    });
}

async function updateOrderStatus(orderId, newStatus) {
    try {
        await db.updateOrder(orderId, { status: newStatus });
        await loadData();
        updateDashboard();
        showNotification(`Order ${orderId} status updated to ${newStatus}`);
        playNotificationSound();
    } catch (error) {
        console.error('Failed to update order:', error);
        showNotification('Failed to update order status', 'error');
    }
}

async function completeOrder(orderId) {
    try {
        await db.deleteOrder(orderId);
        await loadData();
        updateDashboard();
        showNotification(`Order ${orderId} has been served`);
        playNotificationSound();
    } catch (error) {
        console.error('Failed to complete order:', error);
        showNotification('Failed to complete order', 'error');
    }
}

async function confirmPayment(paymentId) {
    try {
        await db.updatePayment(paymentId, { status: 'completed' });
        await loadData();
        updateDashboard();
        showNotification(`Payment ${paymentId} confirmed`);
        playNotificationSound();
    } catch (error) {
        console.error('Failed to confirm payment:', error);
        showNotification('Failed to confirm payment', 'error');
    }
}

// Admin functions
async function addSampleOrder() {
    const orderNumber = Math.floor(Math.random() * 9000) + 1000;
    const tableNumber = Math.floor(Math.random() * 12) + 1;
    
    const sampleItems = [
        { name: "Chicken Curry", quantity: 1, notes: "Medium spicy" },
        { name: "Rice Bowl", quantity: 2 },
        { name: "Soft Drink", quantity: 1 }
    ];
    
    const newOrder = {
        id: `#ORD-${orderNumber}`,
        table: `Table ${tableNumber}`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        items: sampleItems,
        status: "pending",
        total: 28.50
    };
    
    try {
        await db.addOrder(newOrder);
        await loadData();
        updateDashboard();
        showNotification(`New order ${newOrder.id} added`);
        playNotificationSound();
    } catch (error) {
        console.error('Failed to add sample order:', error);
        showNotification('Failed to add sample order', 'error');
    }
}

async function addSamplePayment() {
    const paymentNumber = Math.floor(Math.random() * 900) + 100;
    const tableNumber = Math.floor(Math.random() * 12) + 1;
    const methods = ['cash', 'fonepay'];
    const randomMethod = methods[Math.floor(Math.random() * methods.length)];
    
    const newPayment = {
        id: `#PAY-${paymentNumber}`,
        table: `Table ${tableNumber}`,
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        method: randomMethod,
        amount: (Math.random() * 100 + 20).toFixed(2) * 1,
        status: "pending"
    };
    
    try {
        await db.addPayment(newPayment);
        await loadData();
        updateDashboard();
        showNotification(`New payment ${newPayment.id} added`);
        playNotificationSound();
    } catch (error) {
        console.error('Failed to add sample payment:', error);
        showNotification('Failed to add sample payment', 'error');
    }
}

async function clearAllData() {
    if (confirm('Are you sure you want to clear all orders and payments? This action cannot be undone.')) {
        try {
            await db.clearAllData();
            await loadData();
            updateDashboard();
            showNotification('All data cleared successfully');
        } catch (error) {
            console.error('Failed to clear data:', error);
            showNotification('Failed to clear data', 'error');
        }
    }
}

// Utility functions
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    const messageSpan = notification.querySelector('span');
    
    messageSpan.textContent = message;
    
    if (type === 'error') {
        notification.style.background = 'var(--danger)';
        notification.querySelector('i').className = 'fas fa-exclamation-circle';
    } else {
        notification.style.background = 'var(--success)';
        notification.querySelector('i').className = 'fas fa-check-circle';
    }
    
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

function playNotificationSound() {
    const soundButton = document.getElementById('play-sound');
    if (soundButton.classList.contains('active')) {
        return; // Sound is disabled
    }
    
    // Create a simple beep sound using Web Audio API
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.5);
    } catch (error) {
        console.log('Audio not supported');
    }
}

function updateTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
    });
    const dateString = now.toLocaleDateString([], {
        weekday: 'long',
        month: 'short',
        day: 'numeric'
    });
    
    document.getElementById('current-time').innerHTML = `
        <div style="text-align: right;">
            <div style="font-size: 1.1rem; font-weight: bold;">${timeString}</div>
            <div style="font-size: 0.9rem; opacity: 0.8;">${dateString}</div>
        </div>
    `;
}

// Auto-refresh dashboard every 30 seconds
setInterval(() => {
    updateDashboard();
}, 30000);

// Initialize the application when the page loads
document.addEventListener('DOMContentLoaded', initApp);
    </script>
    
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2ecc71;
            --success: #27ae60;
            --warning: #f39c12;
            --danger: #e74c3c;
            --light: #ecf0f1;
            --dark: #2c3e50;
    ;
        }

        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background: #f4f4f4;
        }

        header {
            background: var(--primary);
            color: white;
            padding: 15px 20px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
        }

        .logo i {
            font-size: 1.5rem;
            margin-right: 10px;
        }

        .header-info {
            font-size: 0.9rem;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            flex-grow: 1;
            min-width: 200px;
            background: var(--light);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            transition: all 0.3s ease-in-out;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card i {
            font-size: 2rem;
            color: var(--primary);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #7f8c8d;
        }

        .dashboard-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        .orders-section, .payments-section {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        .section-title {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--dark);
        }
        .controls {
            display: flex;
            gap: 10px;
        }
        .filter-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            background: #f0f0f0;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }
        .filter-btn.active {
            background: var(--primary);
            color: white;
        }
        .order-list {
            display: grid;
            gap: 15px;
        }
        .order-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }
        .order-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .order-id {
            font-weight: bold;
            color: var(--primary);
        }
        .order-time {
            font-size: 0.9rem;
            color: #7f8c8d;
        }
        .order-table {
            font-size: 0.9rem;
            color: #7f8c8d;
            margin-bottom: 10px;
        }
        .order-items {
            margin-bottom: 10px;
        }
        .order-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .item-quantity {
            font-weight: bold;
            color: var(--primary);
        }
        .item-notes {
            font-size: 0.8rem;
            color: #7f8c8d;
        }
        .order-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .status-badge {
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 0.9rem;
            color: white;
        }

        .status-pending {
            background: var(--warning);
        }
        .status-preparing {
            background: var(--primary);
        }
        .status-ready {
            background: var(--success);
        }
        .status-completed {
            background: var(--secondary);
        }
        .status-actions {
            display: flex;
            gap: 10px;
        }
        .action-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }
        .btn-prepare {
            background: var(--primary);
            color: white;
        }
        .btn-ready {
            background: var(--success);
            color: white;
        }
        .btn-complete {
            background: var(--secondary);
            color: white;
        }
        .payment-list {
            display: grid;
            gap: 15px;
        }
        .payment-card {
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            position: relative;
        }
        .payment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .payment-id {
            font-weight: bold;
            color: var(--primary);
        }
        .payment-method {
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 0.9rem;
            color: white;
        }
        .method-cash {
            background: var(--danger);
        }
        .method-fonepay {
            background: var(--primary);
        }
        .payment-details {
            margin-bottom: 10px;
        }
        .payment-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        .payment-label {
            font-weight: bold;
            color: #7f8c8d;
        }
        .payment-amount {
            color: var(--primary);
            font-weight: bold;
        }
        .status-completed {
            color: var(--success);
        }

        .status-pending {
            color: var(--root);
        }
        .payment-actions {
            display: flex;
            justify-content: flex-end;
        }
        .btn-confirm {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            background: var(--success);
            color: white;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }
        .btn-confirm:hover {
            background: darkgreen;
        }
        .admin-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .admin-btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            background: var(--primary);
            color: white;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s ease;
        }
        .admin-btn:hover {
            background: darkblue;
        }
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 10px;
            opacity: 0;
            transition: all 0.3s ease-in-out;
        }
        .notification.show {
            opacity: 1;
        }
        .notification i {
            font-size: 1.2rem;
        }
        .notification span {
            flex-grow: 1;
        }
        .notification.error {
            background: var(--danger);
        }
        .notification.error i {
            color: white;
        }
        .notification.success {
            background: var(--success);
        }
        .notification.success i {
            color: white;
        }
        .notification.error span {
            color: white;
        }
        .notification.success span {
            color: white;
        }

        .filter-btn i {
            margin-right: 5px;
        }
        .filter-btn.active i {
            color: white;
        }
        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .play-sound-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            background: #f0f0f0;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.2s ease;
        }
        .play-sound-btn.active {
            background: var(--primary);
            color: white;
        }
        .play-sound-btn i {
            font-size: 1.2rem;
        }
        .play-sound-btn.active i {
            color: white;
        }
    </style>
</body>
</html>
